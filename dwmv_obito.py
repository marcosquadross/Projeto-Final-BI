# -*- coding: utf-8 -*-
"""DWMV_OBITO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wjWqrqy6nqbVe7Wj0w4_HR-TxUl-1e_g
"""

import pandas as pd
import sqlite3
from datetime import datetime
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

def treat_age(age: int):
  if age < 400:
    return 0
  if age >= 500 and age < 600:
    return 100 + age%100
  if age >= 600:
    return -1
  else:
    return age%100

def doenca_evitavel(df):
  conditions = [
    (((df["IDADE"] < 5) & (df["IDADE"] >= 0)) & (df["IN_DE_CRIANCA"] == True)),
    (df["IDADE"] >= 5) & (df["IN_DE_ADULTO"] == True)
  ]

  choices = [1, 1]

  df["IN_DE"] = np.select(conditions, choices, default=0)
  return df

def tratar_data_null(df, col):
    df[col] = pd.to_datetime(df[col], errors="coerce").dt.normalize()
    df[col] = df[col].fillna(pd.Timestamp("1700-01-01"))
    return df

"""# Connections"""

URL = "/content/drive/MyDrive/Projeto_Final_BI/"

conn_dw = sqlite3.connect(URL+"dw_mortalidade.db")
conn_stg = sqlite3.connect(URL+"staging.db")

cur_dw = conn_dw.cursor()
cur_stg = conn_stg.cursor()

"""# Code"""

query_stg = "SELECT SEXO, RACACOR, ESTCIV, ESC2010, IDADE, DTNASC, DTOBITO, CODMUNOCOR, ASSISTMED, CAUSABAS, CIRCOBITO, TPMORTEOCO FROM STG_MORTALIDADE"

df_stg = pd.read_sql_query(query_stg, conn_stg)

query = "SELECT * FROM STG_CID"
df_cid = pd.read_sql_query(query, conn_stg)

query = "SELECT * FROM STG_DE_CRIANCA"
df_crianca = pd.read_sql_query(query, conn_stg)

query = "SELECT * FROM STG_DE_ADULTO"
df_adulto = pd.read_sql_query(query, conn_stg)

df_stg.loc[df_stg["CAUSABAS"].isin(df_crianca["CD_CID"].unique()), "IN_DE_CRIANCA"] = 1
df_stg.loc[df_stg["CAUSABAS"].isin(df_adulto["CD_CID"].unique()), "IN_DE_ADULTO"] = 1
df_stg["IN_DE_CRIANCA"].fillna(0, inplace=True)
df_stg["IN_DE_ADULTO"].fillna(0, inplace=True)

df_stg['IDADE'] = df_stg['IDADE'].apply(treat_age)
df_stg = doenca_evitavel(df_stg)

df_stg['DTNASC'] = pd.to_datetime(
    df_stg['DTNASC'].fillna(0).astype(int).astype(str).str.zfill(8),
    format='%d%m%Y',
    errors='coerce'
)

df_stg = tratar_data_null(df_stg, "DTNASC")

query = """
  SELECT CO.SK_CAUSAOBITO, CD.CD_CID, CB.CD_CIRCOBITO, CO.IN_DE
  FROM DWCD_CAUSAOBITO AS CO
  JOIN DWCD_CID AS CD
    ON CO.SK_CID = CD.SK_CID
  JOIN DWCD_CIRCOBITO AS CB
    ON CO.SK_CIRCOBITO = CB.SK_CIRCOBITO
"""

df_co_cb = pd.read_sql_query(query, conn_dw)

df_stg["CIRCOBITO"] = df_stg["CIRCOBITO"].fillna(-1)

df_stg_co_cb = pd.merge(df_stg, df_co_cb, left_on=['CAUSABAS', 'CIRCOBITO', 'IN_DE' ], right_on=["CD_CID", 'CD_CIRCOBITO', 'IN_DE'], how="left")

df_stg_co_cb["SK_CAUSAOBITO"].fillna(-1, inplace=True)

df_stg_co_cb = df_stg_co_cb[['SEXO', 'RACACOR', 'ESTCIV', 'ESC2010', 'IDADE', 'DTNASC', 'DTOBITO','CODMUNOCOR', 'ASSISTMED', 'TPMORTEOCO', 'IN_DE', 'SK_CAUSAOBITO', 'CD_CID', 'CD_CIRCOBITO']]

df_stg_co_cb.fillna(-1, inplace=True)

df_stg_co_cb.to_csv(URL+"stg_co_cb.csv")

conn_stg.close()

"""# DF MUNICIPIO"""

df_stg_co_cb = pd.read_csv(URL+"stg_co_cb.csv", index_col=0)

query_mun = "SELECT SK_MUNICIPIO, CD_MUNICIPIO FROM DWCD_MUNICIPIO"

df_mun = pd.read_sql_query(query_mun, conn_dw)

df_stg_co_cb_mun = pd.merge(df_stg_co_cb, df_mun, left_on="CODMUNOCOR", right_on="CD_MUNICIPIO", how="left")

df_stg_co_cb_mun["SK_MUNICIPIO"].fillna(-1, inplace=True)

df_stg_co_cb_mun.drop("CD_MUNICIPIO", inplace=True, axis=1)
df_stg_co_cb_mun.drop("CODMUNOCOR", inplace=True, axis=1)

df_stg_co_cb_mun

df_stg_co_cb_mun.to_csv(URL+"stg_co_cb_mun.csv")

"""# DF ASSIST MED"""

query_am = "SELECT SK_ASSISTMED, CD_ASSISTMED FROM DWCD_ASSISTMED"

df_am = pd.read_sql_query(query_am, conn_dw)

df_am

df_stg_co_cb_mun_am = pd.merge(df_stg_co_cb_mun, df_am, left_on="ASSISTMED", right_on="CD_ASSISTMED", how="left")

df_stg_co_cb_mun_am.drop(["CD_ASSISTMED", "ASSISTMED"], inplace=True, axis=1)

df_stg_co_cb_mun_am.to_csv(URL+"stg_co_cb_mun_am.csv")

"""# DF GESTACIONAL"""

df_stg_co_cb_mun_am = pd.read_csv(URL+"stg_co_cb_mun_am.csv", index_col=0)

query_gt = "SELECT SK_GESTACIONAL, CD_GESTACIONAL FROM DWCD_GESTACIONAL"

df_gt = pd.read_sql_query(query_gt, conn_dw)

df_co_cb_mun_am_gt = pd.merge(df_stg_co_cb_mun_am, df_gt, left_on="TPMORTEOCO", right_on="CD_GESTACIONAL", how="left")

df_co_cb_mun_am_gt.isna().sum()

df_co_cb_mun_am_gt.drop(["CD_GESTACIONAL", "TPMORTEOCO"], inplace=True, axis=1)

df_co_cb_mun_am_gt.to_csv(URL+"stg_co_cb_mun_am_gt.csv")

"""# DF Pessoa

"""

query = """
  SELECT PE.SK_PESSOA, SX.CD_SEXO, RC.CD_RACA, EC.CD_ESTCIV, EL.CD_ESCOLARIDADE, PE.IDADE, PE.DT_NASCIMENTO
  FROM DWCD_PESSOA AS PE
  JOIN DWCD_SEXO AS SX
    ON PE.SK_SEXO = SX.SK_SEXO
  JOIN DWCD_RACA AS RC
    ON PE.SK_RACA = RC.SK_RACA
  JOIN DWCD_ESTCIV AS EC
    ON PE.SK_ESTCIV = EC.SK_ESTCIV
  JOIN DWCD_ESCOLARIDADE AS EL
    ON PE.SK_ESCOLARIDADE = EL.SK_ESCOLARIDADE
"""

df_pessoa = pd.read_sql_query(query, conn_dw)

"""# TUDO"""

df_stg_co_mun_am_gt = pd.read_csv(URL+"stg_co_cb_mun_am_gt.csv", index_col=0)

df_co_cb_mun_am_gt["DTNASC"] = pd.to_datetime(
    df_co_cb_mun_am_gt['DTNASC'],
    errors='coerce'
)

df_pessoa["DT_NASCIMENTO"] = pd.to_datetime(df_pessoa['DT_NASCIMENTO'])

df_obito = pd.merge(
    df_co_cb_mun_am_gt,
    df_pessoa,
    how="left",
    left_on=["IDADE", "DTNASC", "SEXO", "RACACOR", "ESTCIV", "ESC2010"],
    right_on=["IDADE", "DT_NASCIMENTO", "CD_SEXO", "CD_RACA", "CD_ESTCIV", "CD_ESCOLARIDADE"],
)

df_obito[df_obito['SK_PESSOA'].isna()]

df_obito.rename(columns={"DTOBITO": "DT_OBITO"}, inplace=True)

df_obito["DT_OBITO"] = pd.to_datetime(
    df_obito["DT_OBITO"].astype('Int64').astype(str).str.zfill(8),
    format="%d%m%Y",
    errors="coerce"
)

df_obito['SK_OBITO'] = range(1, len(df_obito) + 1)

df_obito['DT_CARGA'] = datetime.now().date()

df_obito = df_obito[['SK_OBITO', 'SK_PESSOA', 'SK_CAUSAOBITO', 'DT_OBITO', 'SK_MUNICIPIO', 'SK_ASSISTMED', 'SK_GESTACIONAL', 'DT_CARGA']]

df_obito['SK_MUNICIPIO'] = df_obito['SK_MUNICIPIO'].astype(int)
df_obito['SK_CAUSAOBITO'] = df_obito['SK_CAUSAOBITO'].astype(int)

df_obito.to_csv(URL+"df_obito.csv")

df_obito

"""# Criando DWCD_OBITO"""

cur_dw.execute("""DROP TABLE IF EXISTS DWMV_OBITO;""")

cur_dw.execute("""
CREATE TABLE DWMV_OBITO (
    SK_OBITO INTEGER,
    SK_PESSOA INTEGER,
    SK_CAUSAOBITO INTEGER,
    DT_OBITO DATE NOT NULL,
    SK_MUNICIPIO INTEGER,
    SK_ASSISTMED INTEGER,
    SK_GESTACIONAL INTEGER,
    DT_CARGA DATE NOT NULL,
    PRIMARY KEY (SK_OBITO, SK_PESSOA, SK_MUNICIPIO, SK_CAUSAOBITO, SK_ASSISTMED, SK_GESTACIONAL)
);
""")

df_obito.to_sql('DWMV_OBITO', conn_dw, if_exists='append', index=False)

conn_dw.commit()
conn_dw.close()