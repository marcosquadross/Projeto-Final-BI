# -*- coding: utf-8 -*-
"""ETL_DWCD_PESSOA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uon1MDNRJ3Mlh3HhUL_mT4w9cQrwVY0A
"""

import pandas as pd
from datetime import datetime
import sqlite3
import numpy as np

URL = "/content/drive/MyDrive/Projeto_Final_BI/"

from google.colab import drive
drive.mount('/content/drive')

def treat_age(age: int):
  if age < 400:
    return 0
  if age >= 500 and age < 600:
    return 100 + age%100
  if age >= 600:
    return -1
  else:
    return age%100

"""# Extraindo valores do staging"""

conn_extract = sqlite3.connect(URL+"staging.db")
cursor = conn_extract.cursor()
df_extract = pd.read_sql_query("SELECT SEXO, RACACOR, ESTCIV, ESC2010, IDADE, DTNASC FROM STG_MORTALIDADE", conn_extract)
conn_extract.close()
df_extract

"""# Tratando colunas"""

# df_extract.insert(0, 'SK_PESSOA', range(1, len(df_extract) + 1))
df_extract['RACACOR'] = df_extract['RACACOR'].fillna(-1).astype(int)
df_extract['ESTCIV'] = df_extract['ESTCIV'].fillna(-1).astype(int)
df_extract['ESC2010'] = df_extract['ESC2010'].fillna(-1).astype(int)

# df_extract['IDADE'] = df_extract['IDADE'].apply(
#     lambda x: 0 if x < 400
#     else x%100 if x >= 401 and x < 500
#     else x%100 + 100
# )

df_extract['IDADE'] = df_extract['IDADE'].apply(treat_age)

df_extract['DT_NASCIMENTO'] = pd.to_datetime(
    df_extract['DTNASC'].fillna(0).astype(int).astype(str).str.zfill(8),
    format='%d%m%Y',
    errors='coerce'
)

df_extract["DT_NASCIMENTO"].fillna(pd.to_datetime("1700-01-01"), inplace=True)

labels = ["NÃ£o identificado",'0-4 anos', '5-17 anos', '18-59 anos', '60+ anos']

values = [-np.inf, 0, 4, 17, 59, np.inf]

df_extract['FAIXA_ETARIA'] = pd.cut(df_extract['IDADE'], bins=values, labels=labels)

df_extract['IDADE'].max()

"""# Extraindo valores do DW e realizando merge"""

conn_extract = sqlite3.connect(URL+"dw_mortalidade.db")
cursor = conn_extract.cursor()
df_sexo = pd.read_sql_query("SELECT SK_SEXO, CD_SEXO FROM DWCD_SEXO", conn_extract)
df_raca = pd.read_sql_query("SELECT SK_RACA, CD_RACA FROM DWCD_RACA", conn_extract)
df_estciv = pd.read_sql_query("SELECT SK_ESTCIV, CD_ESTCIV FROM DWCD_ESTCIV", conn_extract)
df_esc = pd.read_sql_query("SELECT SK_ESCOLARIDADE, CD_ESCOLARIDADE FROM DWCD_ESCOLARIDADE", conn_extract)
conn_extract.close()

df_pessoa = pd.merge(df_extract, df_sexo, left_on='SEXO', right_on='CD_SEXO', how='left')
df_pessoa = pd.merge(df_pessoa, df_raca, left_on='RACACOR', right_on='CD_RACA', how='left')
df_pessoa = pd.merge(df_pessoa, df_estciv, left_on='ESTCIV', right_on='CD_ESTCIV', how='left')
df_pessoa = pd.merge(df_pessoa, df_esc, left_on='ESC2010', right_on='CD_ESCOLARIDADE', how='left')
# df_pessoa["DT_CARGA"] = datetime.now().date()

df_pessoa = df_pessoa[['SK_SEXO', 'SK_RACA', 'SK_ESTCIV', 'SK_ESCOLARIDADE', 'IDADE', 'DT_NASCIMENTO', 'FAIXA_ETARIA']]
df_pessoa.drop_duplicates(inplace=True)
df_pessoa.reset_index(drop=True, inplace=True)
df_pessoa.insert(0, 'SK_PESSOA', range(1, len(df_pessoa) + 1))
df_pessoa["DT_CARGA"] = datetime.now().date()

df_pessoa

df_pessoa.isna().sum()

"""# Criando tabela DWCD_PESSOA no DW"""

conn = sqlite3.connect(URL+"dw_mortalidade.db")
cur = conn.cursor()

cur.execute("""DROP TABLE IF EXISTS DWCD_PESSOA;""")

cur.execute("""
CREATE TABLE DWCD_PESSOA (
    SK_PESSOA INTEGER,
    SK_SEXO INTEGER,
    SK_RACA INTEGER,
    SK_ESTCIV INTEGER,
    SK_ESCOLARIDADE INTEGER,
    IDADE INTEGER,
    DT_NASCIMENTO DATE,
    FAIXA_ETARIA TEXT NOT NULL,
    DT_CARGA DATE NOT NULL,
    PRIMARY KEY (SK_PESSOA, SK_SEXO, SK_RACA, SK_ESTCIV, SK_ESCOLARIDADE, IDADE, DT_NASCIMENTO)
);
""")

conn = sqlite3.connect(URL+"dw_mortalidade.db")
df_pessoa.to_sql('DWCD_PESSOA', conn, if_exists='append', index=False)

conn.commit()
conn.close()

