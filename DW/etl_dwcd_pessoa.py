# -*- coding: utf-8 -*-
"""ETL_DWCD_PESSOA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uon1MDNRJ3Mlh3HhUL_mT4w9cQrwVY0A
"""

import pandas as pd
from datetime import datetime
import sqlite3
import numpy as np

URL = "/content/drive/MyDrive/Projeto_Final_BI/"

from google.colab import drive
drive.mount('/content/drive')

def treat_age(age: int):
  if age < 400:
    return 0
  if age >= 500 and age < 600:
    return 100 + age%100
  if age >= 600:
    return -1
  else:
    return age%100

conn_dw = sqlite3.connect(URL+"DW/dw_mortalidade.db")
cur = conn_dw.cursor()

# cur.execute("""DROP TABLE IF EXISTS DWCD_PESSOA;""")

cur.execute("""
CREATE TABLE IF NOT EXISTS DWCD_PESSOA (
    SK_PESSOA INTEGER PRIMARY KEY,
    SK_SEXO INTEGER NOT NULL,
    SK_RACA INTEGER NOT NULL,
    SK_ESTCIV INTEGER NOT NULL,
    SK_ESCOLARIDADE INTEGER NOT NULL,
    IDADE INTEGER NOT NULL,
    FAIXA_ETARIA TEXT NOT NULL,
    DT_CARGA DATE DEFAULT CURRENT_DATE
);
""")

# Índice único para evitar duplicação
cur.execute("""
CREATE UNIQUE INDEX IF NOT EXISTS idx_pessoa
ON DWCD_PESSOA (SK_SEXO, SK_RACA, SK_ESTCIV, SK_ESCOLARIDADE, IDADE);
""")

conn_dw.commit()
conn_dw.close()

# Conecta ao DW
conn_dw = sqlite3.connect(URL+"DW/dw_mortalidade.db")
cur = conn_dw.cursor()

# Anexa o banco de staging
cur.execute(f"ATTACH DATABASE '{URL}STG/staging.db' AS stg;")

cur.execute("""
CREATE TEMP TABLE temp_pe AS
SELECT DISTINCT
    COALESCE(SX.SK_SEXO, -1) AS SK_SEXO,
    COALESCE(RC.SK_RACA, -1) AS SK_RACA,
    COALESCE(EC.SK_ESTCIV, -1) AS SK_ESTCIV,
    COALESCE(ES.SK_ESCOLARIDADE, -1) AS SK_ESCOLARIDADE,
    CASE
        WHEN M.IDADE < 400 THEN 0
        WHEN M.IDADE >= 500 AND M.IDADE < 600 THEN 100 + M.IDADE%100
        WHEN M.IDADE >= 600 THEN -1
        ELSE M.IDADE%100
    END AS IDADE,
    CASE
        WHEN M.IDADE >= 600 THEN "Não identificado"
        WHEN M.IDADE <= 404 THEN "0-4 anos"
        WHEN M.IDADE <= 417 THEN "5-17 anos"
        WHEN M.IDADE <= 459 THEN "18-59 anos"
        ELSE "60+ anos"
    END AS FAIXA_ETARIA
FROM stg.STG_MORTALIDADE M
LEFT JOIN DWCD_SEXO SX ON SX.CD_SEXO = M.SEXO
LEFT JOIN DWCD_RACA RC ON RC.CD_RACA = M.RACACOR
LEFT JOIN DWCD_ESTCIV EC ON EC.CD_ESTCIV = M.ESTCIV
LEFT JOIN DWCD_ESCOLARIDADE ES ON ES.CD_ESCOLARIDADE = M.ESC2010
GROUP BY M.SEXO, M.RACACOR, M.ESTCIV, M.ESC2010, M.IDADE;
""")

# Atualiza registros existentes
cur.execute("""
UPDATE DWCD_PESSOA
SET
    FAIXA_ETARIA = (SELECT t.FAIXA_ETARIA
                    FROM temp_pe t
                    WHERE t.SK_SEXO = DWCD_PESSOA.SK_SEXO
                      AND t.SK_RACA = DWCD_PESSOA.SK_RACA
                      AND t.SK_ESTCIV = DWCD_PESSOA.SK_ESTCIV
                      AND t.SK_ESCOLARIDADE = DWCD_PESSOA.SK_ESCOLARIDADE
                      AND t.IDADE = DWCD_PESSOA.IDADE),
    DT_CARGA = CURRENT_DATE
WHERE EXISTS (
    SELECT 1 FROM temp_pe t
    WHERE t.SK_SEXO = DWCD_PESSOA.SK_SEXO
      AND t.SK_RACA = DWCD_PESSOA.SK_RACA
      AND t.SK_ESTCIV = DWCD_PESSOA.SK_ESTCIV
      AND t.SK_ESCOLARIDADE = DWCD_PESSOA.SK_ESCOLARIDADE
      AND t.IDADE = DWCD_PESSOA.IDADE
);
""")

# Insere novos registros
cur.execute("""
INSERT OR IGNORE INTO DWCD_PESSOA (
    SK_SEXO,
    SK_RACA,
    SK_ESTCIV,
    SK_ESCOLARIDADE,
    IDADE,
    FAIXA_ETARIA,
    DT_CARGA
)
SELECT
    SK_SEXO,
    SK_RACA,
    SK_ESTCIV,
    SK_ESCOLARIDADE,
    IDADE,
    FAIXA_ETARIA,
    CURRENT_DATE
FROM temp_pe;
""")

conn_dw.commit()
conn_dw.close()