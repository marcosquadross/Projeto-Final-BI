# -*- coding: utf-8 -*-
"""DWCD_CAUSAOBITO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_sFnsu0WvdybsYqfuQEOACjG2W1aRvpI

# Imports
"""

import pandas as pd
import sqlite3
from datetime import datetime
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

"""# Connections"""

URL = "/content/drive/MyDrive/Projeto_Final_BI/"
URL_DW = URL+"DW/"

conn_dw =  sqlite3.connect(URL_DW+"dw_mortalidade.db")
cur_dw = conn_dw.cursor()

cur_dw.execute("""
CREATE TABLE IF NOT EXISTS DWCD_CAUSAOBITO (
    SK_CAUSAOBITO INTEGER PRIMARY KEY,
    SK_CID INTEGER NOT NULL,
    SK_CIRCOBITO INTEGER NOT NULL,
    IN_DE BOOLEAN NOT NULL,
    DT_CARGA DATE NOT NULL
);
""")

# Cria index para não permitir dados duplicados
cur_dw.execute("""
CREATE UNIQUE INDEX IF NOT EXISTS idx_causa_unico
ON DWCD_CAUSAOBITO (SK_CID, SK_CIRCOBITO, IN_DE);
""")

conn_dw.commit()
conn_dw.close()

# Conecta novamente ao DW
conn_dw = sqlite3.connect(URL_DW+"dw_mortalidade.db")
cur = conn_dw.cursor()

# Anexa staging
cur.execute(f"ATTACH DATABASE '{URL}STG/staging.db' AS stg;")

# Cria staging temporário com causas
cur.execute("""
CREATE TEMP TABLE temp_causa AS
SELECT DISTINCT
    COALESCE(CID.SK_CID, -1) AS SK_CID,
    COALESCE(CR.SK_CIRCOBITO, -1) AS SK_CIRCOBITO,
    CASE
        WHEN CID.IN_DE_CRIANCA = 1 AND M.IDADE < 405 THEN 1
        WHEN CID.IN_DE_ADULTO = 1 AND (M.IDADE >= 405 AND M.IDADE < 475) THEN 1
        ELSE 0
    END AS IN_DE
FROM stg.STG_MORTALIDADE M
LEFT JOIN DWCD_CID CID ON CID.CD_CID = M.CAUSABAS
LEFT JOIN DWCD_CIRCOBITO CR ON CR.CD_CIRCOBITO = M.CIRCOBITO
GROUP BY M.CAUSABAS, M.CIRCOBITO, IN_DE;
""")

# Atualiza registros já existentes (IN_DE e DT_CARGA)
cur.execute("""
UPDATE DWCD_CAUSAOBITO
SET
    IN_DE = (SELECT t.IN_DE
             FROM temp_causa t
             WHERE t.SK_CID = DWCD_CAUSAOBITO.SK_CID
               AND t.SK_CIRCOBITO = DWCD_CAUSAOBITO.SK_CIRCOBITO
               AND t.IN_DE = DWCD_CAUSAOBITO.IN_DE),
    DT_CARGA = CURRENT_DATE
WHERE EXISTS (
    SELECT 1 FROM temp_causa t
    WHERE t.SK_CID = DWCD_CAUSAOBITO.SK_CID
      AND t.SK_CIRCOBITO = DWCD_CAUSAOBITO.SK_CIRCOBITO
      AND t.IN_DE = DWCD_CAUSAOBITO.IN_DE
);
""")

# Insere novos registros (ignora duplicados pelo índice único)
cur.execute("""
INSERT OR IGNORE INTO DWCD_CAUSAOBITO (SK_CID, SK_CIRCOBITO, IN_DE, DT_CARGA)
SELECT SK_CID, SK_CIRCOBITO, IN_DE, CURRENT_DATE
FROM temp_causa;
""")

# Commit e fecha
conn_dw.commit()
conn_dw.close()